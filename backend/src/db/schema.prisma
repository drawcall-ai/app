// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    output        = "../../node_modules/prisma-client"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Job {
    id     String  @id @default(cuid())
    userId String?
    user   User?   @relation(fields: [userId], references: [id])

    uikitJobId String?   @unique
    uikitJob   UikitJob? @relation(fields: [uikitJobId], references: [id])

    deletedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UikitJob {
    id                  String   @id @default(cuid())
    Job                 Job?
    machineId           String?
    output              String?
    error               String?
    canceled            Boolean  @default(false)
    prompt              String
    allowPanelMaterials Boolean?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Better Auth Schema
model User {
    id            String   @id @default(cuid())
    name          String
    email         String   @unique
    emailVerified Boolean  @default(false)
    image         String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    isAnonymous   Boolean  @default(false)

    // Relations
    sessions Session[]
    accounts Account[]
    jobs     Job[]

    @@map("user")
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?

    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

model Account {
    id                    String    @id @default(cuid())
    accountId             String
    providerId            String
    userId                String
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([providerId, accountId])
    @@map("accounts")
}

model Verification {
    id         String   @id @default(cuid())
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, value])
    @@map("verification")
}
